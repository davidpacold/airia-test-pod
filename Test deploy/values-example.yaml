# ================================================================
# Airia Infrastructure Test Pod - Complete Configuration Example
# ================================================================
# This file contains ALL available configuration options with detailed
# comments and examples. Copy this file to create your own values.yaml
# and enable only the services you need to test.
#
# Quick Start:
# 1. Copy this file: cp values-example.yaml my-values.yaml
# 2. Update auth credentials (required)
# 3. Enable and configure your services
# 4. Install: helm install airia-test-pod airia-test-pod/airia-test-pod -f my-values.yaml
#
# HELM TEMPLATE MAPPING:
# All config values are nested under 'config:' so Helm templates should use:
# .Values.config.serviceName.fieldName → ENVIRONMENT_VARIABLE
# Example: .Values.config.llama.baseUrl → LLAMA_BASE_URL
#
# Table of Contents:
# - Authentication (REQUIRED)
# - Section 1: Database Services (PostgreSQL, Cassandra)
# - Section 2: Storage Services (Azure Blob, S3, MinIO)
# - Section 3: AI & ML Services (OpenAI, OpenAI-Compatible, Llama, Document Intelligence, Embeddings)
# - Section 4: Infrastructure Testing (SSL, Kubernetes PVC)
# - Ingress Configuration (for external access)
# - Service & Resource Configuration
# - Advanced Kubernetes Options (optional)
# - Environment Variables (advanced/legacy configuration)
# ================================================================

# Basic Pod Configuration
replicaCount: 1

image:
  repository: ghcr.io/davidpacold/airia-test-pod
  pullPolicy: IfNotPresent
  tag: "latest"  # Use specific version for production (e.g., "v1.0.64")

# ================================================================
# REQUIRED: Authentication Configuration
# ================================================================
# These credentials are used to access the test pod dashboard
config:
  auth:
    username: "admin"
    password: "CHANGE-THIS-PASSWORD"  # REQUIRED: Set a secure password
    secretKey: "CHANGE-THIS-SECRET-KEY"  # REQUIRED: Generate with: openssl rand -hex 32
  
  # ================================================================
  # SECTION 1: Database Services
  # ================================================================
  
  # PostgreSQL Database (Azure Database for PostgreSQL or any PostgreSQL instance)
  postgresql:
    enabled: false  # Set to true to test PostgreSQL connectivity
    host: "your-server.postgres.database.azure.com"  # PostgreSQL hostname (Helm: .Values.config.postgresql.host → POSTGRES_HOST)
    port: "5432"  # PostgreSQL port (Helm: .Values.config.postgresql.port → POSTGRES_PORT)
    database: "postgres"  # Database name to connect to (Helm: .Values.config.postgresql.database → POSTGRES_DATABASE)
    sslmode: "require"  # SSL mode (Helm: .Values.config.postgresql.sslmode → POSTGRES_SSLMODE)
    username: "your-username"  # Database username (Helm: .Values.config.postgresql.username → POSTGRES_USER)
    password: "your-password"  # Database password (Helm: .Values.config.postgresql.password → POSTGRES_PASSWORD)
    # Note: Test will verify connection, list databases, and check for required extensions

  # Apache Cassandra NoSQL Database
  cassandra:
    enabled: false  # Set to true to test Apache Cassandra
    hosts: "cassandra-node1.example.com,cassandra-node2.example.com"  # Comma-separated nodes (maps to CASSANDRA_HOSTS)
    port: "9042"  # Default Cassandra CQL port (maps to CASSANDRA_PORT)
    username: ""  # Optional username (maps to CASSANDRA_USERNAME)
    password: ""  # Optional password (maps to CASSANDRA_PASSWORD)
    keyspace: ""  # Optional keyspace to test (maps to CASSANDRA_KEYSPACE)
    datacenter: "datacenter1"  # Datacenter name (maps to CASSANDRA_DATACENTER)
    useSsl: false  # Set to true if SSL required (maps to CASSANDRA_USE_SSL)
    # Note: Test will check cluster health, list keyspaces, and verify connectivity
  
  # ================================================================
  # SECTION 2: Storage Services
  # ================================================================
  
  # Azure Blob Storage
  blobStorage:
    enabled: false  # Set to true to test Azure Blob Storage
    accountName: "your-storage-account"  # Storage account name (maps to BLOB_ACCOUNT_NAME)
    accountKey: "your-account-key"  # Storage account access key (maps to BLOB_ACCOUNT_KEY)
    containerName: "test-container"  # Container to test (maps to BLOB_CONTAINER_NAME)
    endpointSuffix: "core.windows.net"  # Optional: Azure endpoint suffix (maps to BLOB_ENDPOINT_SUFFIX)
    # Note: Test will verify authentication, create container, upload/download test files

  # MinIO (S3-compatible object storage)
  minio:
    enabled: false  # Set to true to test MinIO
    endpointUrl: "https://minio.example.com"  # MinIO server URL (maps to MINIO_ENDPOINT_URL)
    accessKey: "your-access-key"  # MinIO access key (maps to MINIO_ACCESS_KEY)
    secretKey: "your-secret-key"  # MinIO secret key (maps to MINIO_SECRET_KEY)
    bucketName: "test-bucket"  # Bucket to test (maps to MINIO_BUCKET_NAME)
    secure: true  # Use HTTPS (maps to MINIO_SECURE)
    # Note: Compatible with any S3-compatible storage (e.g., Ceph, Wasabi)

  # Amazon S3 Storage
  s3:
    enabled: false  # Set to true to test Amazon S3
    region: "us-east-1"  # AWS region (maps to AWS_REGION)
    accessKeyId: "your-access-key"  # AWS access key ID (maps to AWS_ACCESS_KEY_ID)
    secretAccessKey: "your-secret-key"  # AWS secret access key (maps to AWS_SECRET_ACCESS_KEY)
    sessionToken: ""  # Optional: for temporary AWS credentials (maps to AWS_SESSION_TOKEN)
    bucketName: "test-bucket"  # S3 bucket to test (maps to S3_BUCKET_NAME)
    endpointUrl: ""   # Optional: custom endpoint for S3-compatible services (maps to S3_ENDPOINT_URL)
    # Note: Also works with S3-compatible services like DigitalOcean Spaces
  
  # ================================================================
  # SECTION 3: AI & Machine Learning Services
  # ================================================================
  
  # Azure OpenAI / OpenAI API
  openai:
    enabled: false  # Set to true to test Azure OpenAI or OpenAI API
    
    # Azure OpenAI Settings (for Azure OpenAI Service)
    endpoint: "https://your-openai.openai.azure.com/"  # Azure OpenAI endpoint (maps to AZURE_OPENAI_ENDPOINT)
    apiKey: "your-azure-api-key"  # Azure OpenAI API key (maps to AZURE_OPENAI_API_KEY)
    deploymentName: "gpt-35-turbo"  # Azure model deployment name (maps to AZURE_OPENAI_DEPLOYMENT_NAME)
    embeddingDeployment: "text-embedding-ada-002"  # Azure embedding deployment (maps to AZURE_OPENAI_EMBEDDING_DEPLOYMENT)
    apiVersion: "2024-02-01"  # Azure API version (maps to AZURE_OPENAI_API_VERSION)
    
    # Generic OpenAI Settings (for OpenAI API or self-hosted)
    openaiBaseUrl: "https://api.openai.com/v1"  # OpenAI base URL (maps to OPENAI_BASE_URL)
    openaiApiKey: "your-openai-api-key"  # OpenAI API key (maps to OPENAI_API_KEY)
    openaiModelName: "gpt-3.5-turbo"  # OpenAI model name (maps to OPENAI_MODEL_NAME)
    openaiEmbeddingModel: "text-embedding-ada-002"  # OpenAI embedding model (maps to OPENAI_EMBEDDING_MODEL)
    
    # Test Configuration
    timeout: 30  # Request timeout in seconds (maps to OPENAI_TIMEOUT)
    testCompletion: true  # Test text completion/chat capabilities (maps to TEST_COMPLETION)
    testEmbedding: true  # Test embedding generation (maps to TEST_EMBEDDING)
    
    # Custom Testing (Optional)
    customPrompt: "Test the infrastructure readiness"  # Custom test prompt (maps to OPENAI_CUSTOM_PROMPT)
    customSystemMessage: "You are a helpful assistant"  # System message (maps to OPENAI_CUSTOM_SYSTEM_MESSAGE)
    # Note: Test will verify API access, model availability, and optionally test embeddings
    # Supports custom file uploads (PDF, images) via dashboard UI

  # OpenAI-Compatible API Models (LocalAI, FastChat, Ollama, etc.)
  openaiCompatible:
    enabled: false  # Set to true to test OpenAI-compatible endpoints
    baseUrl: "http://localhost:8080/v1"  # API endpoint (e.g., LocalAI, Ollama with /v1)
    apiKey: "not-needed-for-local"  # API key if required (many local models don't need this)
    modelName: "ggml-gpt4all-j"  # Model name available on your endpoint
    maxTokens: 500  # Maximum tokens for responses
    temperature: 0.1  # Temperature for generation (0.0 to 1.0)
    # Note: This enables both OpenAI and Llama tests depending on model name
    # If modelName contains "llama", both test types will be available
    # Dashboard supports custom prompts and file uploads for compatible models

  # Self-Hosted Llama Models (dedicated Llama endpoints)
  llama:
    enabled: false  # Set to true to test dedicated Llama endpoints
    baseUrl: "http://localhost:11434/v1"  # Llama API endpoint (Helm: .Values.config.llama.baseUrl → LLAMA_BASE_URL)
    apiKey: ""  # API key if required (Helm: .Values.config.llama.apiKey → LLAMA_API_KEY)
    modelName: "llama2"  # Llama model name (Helm: .Values.config.llama.modelName → LLAMA_MODEL_NAME)
    maxTokens: 500  # Maximum tokens for responses (Helm: .Values.config.llama.maxTokens → LLAMA_MAX_TOKENS)
    temperature: 0.1  # Temperature for generation (Helm: .Values.config.llama.temperature → LLAMA_TEMPERATURE)
    timeout: 60  # Request timeout in seconds (Helm: .Values.config.llama.timeout → LLAMA_TIMEOUT)
    # Note: Dashboard supports custom prompts and file uploads for Llama models

  # Azure Document Intelligence (Form Recognizer)
  documentIntelligence:
    enabled: false  # Set to true to test Document Intelligence
    endpoint: "https://your-doc-intel.cognitiveservices.azure.com/"  # Cognitive Services endpoint (maps to AZURE_DOC_INTEL_ENDPOINT)
    apiKey: "your-api-key"  # Cognitive Services API key (maps to AZURE_DOC_INTEL_API_KEY)
    model: "prebuilt-document"  # Model to use (maps to AZURE_DOC_INTEL_MODEL)
    testUrl: ""  # Optional: URL of test document to analyze (maps to AZURE_DOC_INTEL_TEST_URL)
    timeout: 60  # Request timeout in seconds (maps to DOC_INTEL_TIMEOUT)
    # Note: Test will analyze sample documents and verify API access
    # Supports custom document uploads via dashboard UI

  # Custom Embedding Models (OpenAI-compatible endpoints)
  embeddings:
    enabled: false  # Set to true to test embedding endpoints
    apiKey: "your-api-key"  # API key for authentication (maps to EMBEDDING_API_KEY)
    baseUrl: "https://api.openai.com/v1"  # API base URL (maps to EMBEDDING_BASE_URL)
    modelName: "text-embedding-ada-002"  # Embedding model name (maps to EMBEDDING_MODEL_NAME)
    # customHeaders: "Header1:Value1,Header2:Value2"  # Optional: Custom HTTP headers (maps to EMBEDDING_CUSTOM_HEADERS)
    # Note: Test will generate embeddings and calculate similarity scores
    # Supports batch processing and custom text/file inputs via dashboard
  
  # ================================================================
  # SECTION 4: Infrastructure & Security Testing
  # ================================================================
  
  # SSL/TLS Certificate Validation
  ssl:
    enabled: false  # Set to true to test SSL certificates
    testUrls: "https://api.example.com,https://app.example.com"  # Comma-separated URLs to test (maps to SSL_TEST_URLS)
    connectTimeout: 10  # Connection timeout in seconds (maps to SSL_CONNECT_TIMEOUT)
    warningDays: 30  # Warn if certificate expires within this many days (maps to SSL_WARNING_DAYS)
    # Note: Test will validate certificate chains, expiration, and hostname matching
    # Detects common issues like missing intermediate certificates
  
  # Kubernetes Storage Testing (PVC - Persistent Volume Claims)
  kubernetes:
    storageClass: ""  # Leave empty to use cluster default (maps to STORAGE_CLASS)
    testPvcSize: "1Gi"  # Size of test PVC to create (maps to TEST_PVC_SIZE)
    # Note: Test will verify storage class availability and PVC creation permissions
    # Requires RBAC permissions (automatically configured by Helm)

# ================================================================
# Ingress Configuration (Required for Production)
# ================================================================
# Configure how external traffic reaches the test pod
ingress:
  enabled: true  # Set to false for port-forward only access
  className: "airia-nginx"  # Custom class to avoid conflicts with other apps
  # Common options: "nginx", "traefik", "azure-application-gateway", "istio", or your custom class
  # Using a custom class prevents conflicts with existing ingress controllers

  # Annotations for NGINX Ingress Controller
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # Don't force HTTPS redirect
    nginx.ingress.kubernetes.io/proxy-body-size: "30m"  # Allow large file uploads (25MB + overhead)
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"  # 5 minute timeout for long AI operations
  
  # Host configuration (REQUIRED: Update with your domain)
  hosts:
    - host: airia-test.yourdomain.com  # CHANGE THIS to your domain
      paths:
        - path: /
          pathType: Prefix
    
    # Additional hosts (optional - for multi-domain setups)
    # - host: airia-test-secondary.yourdomain.com
    #   paths:
    #     - path: /
    #       pathType: Prefix
  
  # TLS/SSL configuration (REQUIRED for HTTPS)
  tls:
    - secretName: airia-test-tls  # CHANGE THIS: Name of K8s secret containing TLS certificate
      hosts:
        - airia-test.yourdomain.com  # CHANGE THIS: Must match host above
    
    # Additional TLS configurations (for multi-domain setups)
    # - secretName: secondary-tls
    #   hosts:
    #     - airia-test-secondary.yourdomain.com

# ================================================================
# Service Configuration
# ================================================================
service:
  type: ClusterIP  # Options: ClusterIP (default), NodePort, LoadBalancer
  port: 80  # Service port
  targetPort: 8080  # Container port
  # nodePort: 30080  # Only used if type is NodePort

# ================================================================
# Resource Management
# ================================================================
# Define CPU and memory limits for the pod
resources:
  limits:
    cpu: 500m  # Maximum CPU (0.5 cores)
    memory: 512Mi  # Maximum memory
  requests:
    cpu: 100m  # Guaranteed CPU (0.1 cores)
    memory: 256Mi  # Guaranteed memory

# ================================================================
# Namespace Configuration
# ================================================================
namespace:
  create: true  # Set to false if namespace already exists
  name: "airia-preprod"  # Namespace name for deployment

# ================================================================
# Advanced Kubernetes Configuration (Optional)
# ================================================================
# These settings are typically not needed for basic deployments

# Private Registry Configuration
# imagePullSecrets:
#   - name: my-registry-secret  # K8s secret for private registry authentication

# Service Account
# serviceAccount:
#   create: true  # Create a dedicated service account
#   annotations: {}  # Annotations for the service account
#   name: ""  # Leave empty to auto-generate

# Pod Annotations (useful for monitoring/observability)
# podAnnotations:
#   prometheus.io/scrape: "true"  # Enable Prometheus metrics scraping
#   prometheus.io/port: "8080"  # Metrics port
#   prometheus.io/path: "/metrics"  # Metrics endpoint

# Security Context (pod-level security settings)
# podSecurityContext:
#   fsGroup: 2000  # Group ID for volume ownership
#   runAsNonRoot: true  # Enforce non-root user
#   runAsUser: 1000  # User ID to run as

# Container Security Context
# securityContext:
#   allowPrivilegeEscalation: false
#   capabilities:
#     drop:
#     - ALL  # Drop all capabilities
#   readOnlyRootFilesystem: false  # Note: false required for file uploads
#   runAsNonRoot: true
#   runAsUser: 1000

# Horizontal Pod Autoscaling
# autoscaling:
#   enabled: false  # Enable HPA
#   minReplicas: 1  # Minimum pod count
#   maxReplicas: 3  # Maximum pod count
#   targetCPUUtilizationPercentage: 80  # Scale up at 80% CPU
#   targetMemoryUtilizationPercentage: 80  # Scale up at 80% memory

# Node Selection (schedule pods on specific nodes)
# nodeSelector:
#   kubernetes.io/os: linux  # Linux nodes only
#   node-role: worker  # Custom node label example

# Tolerations (allow pods on tainted nodes)
# tolerations:
#   - key: "dedicated"
#     operator: "Equal"
#     value: "test-pods"
#     effect: "NoSchedule"

# Pod Affinity/Anti-affinity Rules
# affinity:
#   # Prefer to spread pods across nodes
#   podAntiAffinity:
#     preferredDuringSchedulingIgnoredDuringExecution:
#     - weight: 100
#       podAffinityTerm:
#         labelSelector:
#           matchExpressions:
#           - key: app.kubernetes.io/name
#             operator: In
#             values:
#             - airia-test-pod
#         topologyKey: kubernetes.io/hostname

# ================================================================
# Environment Variables (Advanced)
# ================================================================
# Additional environment variables can be set directly
# Note: Use the dedicated configuration blocks above (openaiCompatible, llama) 
# instead of environment variables when possible for better organization

# Example for custom environment variables:
# extraEnvVars:
#   - name: CUSTOM_API_TIMEOUT
#     value: "300"
#   - name: LOG_LEVEL
#     value: "DEBUG"
#   - name: CUSTOM_FEATURE_FLAG
#     value: "true"

# Legacy environment variable support (deprecated - use config blocks above):
# These environment variables are still supported but the config blocks are preferred
# - LLAMA_BASE_URL, LLAMA_API_KEY, LLAMA_MODEL_NAME (use llama config block instead)
# - OPENAI_BASE_URL, OPENAI_API_KEY, OPENAI_MODEL_NAME (use openaiCompatible config block instead)

# ================================================================
# End of Configuration
# ================================================================
# For more configuration options, see:
# - helm/airia-test-pod/values.yaml (all default values)
# - DEPLOYMENT_GUIDE.md (production setup guide)
# - README.md (quick start guide)