name: 🔄 Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Kubernetes namespace'
        required: true
        default: 'default'
      release_name:
        description: 'Helm release name'
        required: true
        default: 'airia-test-pod'
      revision:
        description: 'Revision to rollback to (leave empty for previous)'
        required: false
      reason:
        description: 'Rollback reason'
        required: true
        default: 'Manual rollback requested'
      health_check_timeout:
        description: 'Health check timeout (seconds)'
        required: false
        default: '300'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  rollback-validation:
    name: 🔍 Pre-Rollback Validation
    runs-on: ubuntu-latest
    outputs:
      current_revision: ${{ steps.current.outputs.revision }}
      target_revision: ${{ steps.target.outputs.revision }}
      rollback_available: ${{ steps.validate.outputs.available }}
    
    steps:
      - name: Check inputs
        run: |
          echo "🔄 Rollback Request Details:"
          echo "Namespace: ${{ github.event.inputs.namespace }}"
          echo "Release: ${{ github.event.inputs.release_name }}"
          echo "Target Revision: ${{ github.event.inputs.revision || 'Previous' }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
      
      - name: Get current revision
        id: current
        run: |
          echo "revision=1" >> $GITHUB_OUTPUT
          echo "Current revision: 1"
      
      - name: Determine target revision
        id: target
        run: |
          if [ -n "${{ github.event.inputs.revision }}" ]; then
            echo "revision=${{ github.event.inputs.revision }}" >> $GITHUB_OUTPUT
            echo "Target revision: ${{ github.event.inputs.revision }}"
          else
            echo "revision=0" >> $GITHUB_OUTPUT
            echo "Target revision: Previous (0)"
          fi
      
      - name: Validate rollback availability
        id: validate
        run: |
          # In a real environment, this would check Helm history
          echo "available=true" >> $GITHUB_OUTPUT
          echo "✅ Rollback validation passed"

  rollback:
    name: 🔄 Execute Rollback
    runs-on: ubuntu-latest
    needs: rollback-validation
    if: needs.rollback-validation.outputs.rollback_available == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create rollback manifest
        run: |
          cat > rollback-manifest.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: rollback-info-$(date +%s)
            namespace: ${{ github.event.inputs.namespace }}
            annotations:
              rollback.airia.com/timestamp: "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              rollback.airia.com/triggered-by: "${{ github.actor }}"
              rollback.airia.com/reason: "${{ github.event.inputs.reason }}"
              rollback.airia.com/from-revision: "${{ needs.rollback-validation.outputs.current_revision }}"
              rollback.airia.com/to-revision: "${{ needs.rollback-validation.outputs.target_revision }}"
              rollback.airia.com/workflow-run: "${{ github.run_id }}"
          data:
            rollback_details: |
              Rollback executed at: $(date -u)
              From revision: ${{ needs.rollback-validation.outputs.current_revision }}
              To revision: ${{ needs.rollback-validation.outputs.target_revision }}
              Triggered by: ${{ github.actor }}
              Reason: ${{ github.event.inputs.reason }}
              GitHub Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF
          
          echo "📄 Rollback manifest created"
      
      - name: Simulate Helm rollback
        run: |
          echo "🔄 Executing Helm rollback..."
          echo "helm rollback ${{ github.event.inputs.release_name }} ${{ needs.rollback-validation.outputs.target_revision }} --namespace ${{ github.event.inputs.namespace }}"
          
          # Simulate rollback success
          sleep 2
          echo "✅ Helm rollback completed successfully"
      
      - name: Wait for deployment rollback
        run: |
          echo "⏳ Waiting for deployment to rollback..."
          echo "kubectl rollout status deployment/${{ github.event.inputs.release_name }} -n ${{ github.event.inputs.namespace }} --timeout=300s"
          
          # Simulate deployment rollback
          sleep 3
          echo "✅ Deployment rollback completed"

  health-validation:
    name: 🏥 Post-Rollback Health Check
    runs-on: ubuntu-latest
    needs: [rollback-validation, rollback]
    
    steps:
      - name: Wait for application startup
        run: |
          echo "⏳ Waiting for application to start after rollback..."
          sleep 10
          echo "✅ Application startup period completed"
      
      - name: Health check validation
        run: |
          echo "🏥 Running health checks..."
          timeout=${{ github.event.inputs.health_check_timeout }}
          
          # Simulate health check (in real environment, would use kubectl or direct HTTP)
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            # kubectl exec deployment/${{ github.event.inputs.release_name }} -n ${{ github.event.inputs.namespace }} -- curl -f http://localhost:8080/health/live
            
            if [ $i -eq 5 ]; then
              echo "✅ Health checks passed - rollback successful"
              break
            fi
            sleep 5
          done
      
      - name: Validate service endpoints
        run: |
          echo "🔍 Validating service endpoints..."
          # kubectl get service ${{ github.event.inputs.release_name }}-service -n ${{ github.event.inputs.namespace }}
          # kubectl get ingress -n ${{ github.event.inputs.namespace }}
          echo "✅ Service endpoints validated"
      
      - name: Generate rollback report
        run: |
          cat > rollback-report.md << EOF
          # 🔄 Rollback Report
          
          **Execution Time:** $(date -u)
          **Triggered By:** ${{ github.actor }}
          **Reason:** ${{ github.event.inputs.reason }}
          
          ## Rollback Details
          - **Namespace:** ${{ github.event.inputs.namespace }}
          - **Release:** ${{ github.event.inputs.release_name }}
          - **From Revision:** ${{ needs.rollback-validation.outputs.current_revision }}
          - **To Revision:** ${{ needs.rollback-validation.outputs.target_revision }}
          - **GitHub Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## Health Check Results
          - ✅ Application startup: PASSED
          - ✅ Health endpoints: PASSED
          - ✅ Service validation: PASSED
          
          ## Status
          **✅ ROLLBACK SUCCESSFUL**
          
          The application has been successfully rolled back and is operating normally.
          EOF
          
          echo "📊 Rollback report generated"
      
      - name: Upload rollback report
        uses: actions/upload-artifact@v4
        with:
          name: rollback-report-${{ github.run_id }}
          path: rollback-report.md
          retention-days: 30

  notify:
    name: 📢 Rollback Notification
    runs-on: ubuntu-latest
    needs: [rollback-validation, rollback, health-validation]
    if: always()
    
    steps:
      - name: Determine rollback status
        id: status
        run: |
          if [[ "${{ needs.health-validation.result }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "message=✅ Rollback completed successfully" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "message=❌ Rollback failed or incomplete" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi
      
      - name: Send rollback notifications
        run: |
          echo "📢 Sending rollback notifications..."
          
          # Create Slack notification for rollback
          cat > rollback-slack.json << EOF
          {
            "text": "🔄 Airia Test Pod Rollback ${{ steps.status.outputs.success == 'true' && 'Completed' || 'Failed' }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🔄 Rollback ${{ steps.status.outputs.success == 'true' && 'Completed' || 'Failed' }}: airia-test-pod"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\n${{ steps.status.outputs.message }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Triggered By:*\n${{ github.actor }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Namespace:*\n${{ github.event.inputs.namespace }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Release:*\n${{ github.event.inputs.release_name }}"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Reason:* ${{ github.event.inputs.reason }}\n*From Revision:* ${{ needs.rollback-validation.outputs.current_revision }} → *To Revision:* ${{ needs.rollback-validation.outputs.target_revision }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Rollback Workflow"
                    },
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
          EOF
          
          # Create Teams notification for rollback
          cat > rollback-teams.json << EOF
          {
            "@type": "MessageCard",
            "@context": "https://schema.org/extensions",
            "summary": "${{ steps.status.outputs.message }}",
            "themeColor": "${{ steps.status.outputs.color == 'good' && '00FF00' || 'FF0000' }}",
            "sections": [
              {
                "activityTitle": "🔄 Airia Test Pod Rollback",
                "activitySubtitle": "${{ steps.status.outputs.message }}",
                "facts": [
                  {
                    "name": "Triggered By",
                    "value": "${{ github.actor }}"
                  },
                  {
                    "name": "Namespace",
                    "value": "${{ github.event.inputs.namespace }}"
                  },
                  {
                    "name": "Release",
                    "value": "${{ github.event.inputs.release_name }}"
                  },
                  {
                    "name": "From → To Revision",
                    "value": "${{ needs.rollback-validation.outputs.current_revision }} → ${{ needs.rollback-validation.outputs.target_revision }}"
                  },
                  {
                    "name": "Time",
                    "value": "$(date -u +%Y-%m-%d\ %H:%M\ UTC)"
                  }
                ],
                "text": "**Reason:** ${{ github.event.inputs.reason }}"
              }
            ],
            "potentialAction": [
              {
                "@type": "OpenUri",
                "name": "View Rollback Workflow",
                "targets": [
                  {
                    "os": "default",
                    "uri": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "📱 Rollback notifications would be sent to:"
          echo "- Slack: SLACK_WEBHOOK_URL (if configured)"
          echo "- Teams: TEAMS_WEBHOOK_URL (if configured)"
          echo "- Email: NOTIFICATION_EMAIL_LIST (if configured)"
          
          # In real environment, send notifications:
          # curl -X POST -H 'Content-type: application/json' --data @rollback-slack.json ${{ secrets.SLACK_WEBHOOK_URL }}
          # curl -X POST -H 'Content-type: application/json' --data @rollback-teams.json ${{ secrets.TEAMS_WEBHOOK_URL }}
      
      - name: Create notification summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🔄 Rollback Summary
          
          ${{ steps.status.outputs.message }}
          
          **Details:**
          - **Namespace:** ${{ github.event.inputs.namespace }}
          - **Release:** ${{ github.event.inputs.release_name }}
          - **Triggered By:** ${{ github.actor }}
          - **Reason:** ${{ github.event.inputs.reason }}
          - **From Revision:** ${{ needs.rollback-validation.outputs.current_revision }}
          - **To Revision:** ${{ needs.rollback-validation.outputs.target_revision }}
          
          **Execution Time:** $(date -u)
          **GitHub Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ## 📢 Notifications
          
          Rollback status notifications have been generated for:
          - 📱 Slack (webhook required)
          - 📧 Microsoft Teams (webhook required)  
          - ✉️ Email (SMTP configuration required)
          EOF

  # Auto-rollback trigger job (for use by other workflows)
  auto-rollback-check:
    name: 🤖 Auto-Rollback Health Check
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Health check after deployment
        run: |
          echo "🏥 Performing post-deployment health check..."
          
          # This would be called by release.yml workflow
          # Check application health for 5 minutes after deployment
          timeout=300
          interval=30
          attempts=$((timeout / interval))
          
          for i in $(seq 1 $attempts); do
            echo "Health check attempt $i/$attempts..."
            
            # In real environment, check actual health endpoints
            # curl -f http://service-url/health/live && curl -f http://service-url/health/ready
            
            if [ $i -eq $attempts ]; then
              echo "❌ Health checks failed - triggering auto-rollback"
              echo "auto_rollback_needed=true" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "✅ Health check passed"
            break
          done
      
      - name: Trigger automatic rollback
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'rollback.yml',
              ref: 'main',
              inputs: {
                namespace: 'default',
                release_name: 'airia-test-pod',
                reason: 'Automatic rollback due to failed health checks'
              }
            });
            
            console.log('✅ Auto-rollback workflow triggered');